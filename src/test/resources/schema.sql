CREATE TABLE IF NOT EXISTS role
(
    role_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    role_name  VARCHAR(255),
    CONSTRAINT pk_role PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS  users
(
    user_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    nickname   VARCHAR(255),
    email      VARCHAR(255),
    password   VARCHAR(255),
    provider   VARCHAR(255),
    file_id    BIGINT,
    deleted    BOOLEAN                                 NOT NULL,
    deleted_at TIMESTAMP,
    CONSTRAINT pk_users PRIMARY KEY (user_id)
    );


CREATE TABLE IF NOT EXISTS  user_role
(
    user_role_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at   TIMESTAMP,
    updated_at   TIMESTAMP,
    user_id      BIGINT,
    role_id      BIGINT,
    CONSTRAINT pk_user_role PRIMARY KEY (user_role_id)
);

CREATE TABLE IF NOT EXISTS files
(
    file_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    file_name  VARCHAR(255),
    file_path  VARCHAR(255),
    file_type  VARCHAR(255),
    file_size  BIGINT,
    deleted    BOOLEAN                                 NOT NULL,
    deleted_at TIMESTAMP,
    CONSTRAINT pk_files PRIMARY KEY (file_id)
);

CREATE TABLE IF NOT EXISTS post
(
    post_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    title      VARCHAR(255),
    content    CLOB,
    user_id    BIGINT,
    deleted    BOOLEAN                                 NOT NULL,
    deleted_at TIMESTAMP,
    CONSTRAINT pk_post PRIMARY KEY (post_id)
);

CREATE TABLE IF NOT EXISTS comment
(
    comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    content    CLOB,
    post_id    BIGINT,
    user_id    BIGINT,
    parent_id  BIGINT,
    deleted    BOOLEAN                                 NOT NULL,
    deleted_at TIMESTAMP,
    CONSTRAINT pk_comment PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS notification
(
    notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at      TIMESTAMP,
    updated_at      TIMESTAMP,
    message         VARCHAR(255),
    is_read         BOOLEAN                                 NOT NULL,
    type            VARCHAR(255),
    entity_type     VARCHAR(255),
    entity_id       BIGINT,
    user_id         BIGINT,
    CONSTRAINT pk_notification PRIMARY KEY (notification_id)
);

ALTER TABLE notification
    ADD CONSTRAINT FK_NOTIFICATION_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE comment
    ADD CONSTRAINT FK_COMMENT_ON_PARENT FOREIGN KEY (parent_id) REFERENCES comment (comment_id);

ALTER TABLE comment
    ADD CONSTRAINT FK_COMMENT_ON_POST FOREIGN KEY (post_id) REFERENCES post (post_id);

ALTER TABLE comment
    ADD CONSTRAINT FK_COMMENT_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE post
    ADD CONSTRAINT FK_POST_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE user_role
    ADD CONSTRAINT FK_USER_ROLE_ON_ROLE FOREIGN KEY (role_id) REFERENCES role (role_id);

ALTER TABLE user_role
    ADD CONSTRAINT FK_USER_ROLE_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE users
    ADD CONSTRAINT uc_users_file UNIQUE (file_id);

ALTER TABLE users
    ADD CONSTRAINT FK_USERS_ON_FILE FOREIGN KEY (file_id) REFERENCES files (file_id);